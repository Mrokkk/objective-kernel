#!/bin/bash

qemu=$(which qemu-system-i386 2>/dev/null || which qemu-system-x86_64 2>/dev/null)
timeout=3
grep_patterns=

set -e

if [[ "${qemu}" == "" ]]; then
    echo "No QEMU found!"
    exit 1
fi

rm -rf log

IFS=$'\n'
tests=(`strings @CMAKE_CURRENT_BINARY_DIR@/@PROJECT_NAME@-tests | grep test_cases | c++filt | grep "()" | \
    sed 's/test_cases:://g;s/__/\./g;s/()//g; /yacppl/d; /{/d'`)

unset IFS

if [[ "$DEBUG" ]]; then
    grep_patterns+="\|DEBUG"
fi

function run_test() {
    local name=${1}
    perl -pi -e 's/ \/kernel .*;/ \/kernel '"$(printf "%-64s" ${test})"'; then reboot;/g' \
        @CMAKE_CURRENT_BINARY_DIR@/images/test-image.iso
    # TODO
}

for test in "${tests[@]}"; do
    perl -pi -e 's/ \/kernel .*;/ \/kernel '"$(printf "%-64s" ${test})"'; then reboot;/g' \
        @CMAKE_CURRENT_BINARY_DIR@/images/test-image.iso
    timeout --foreground ${timeout} \
        ${qemu} -cdrom @CMAKE_CURRENT_BINARY_DIR@/images/test-image.iso \
            -display none -serial stdio -no-reboot -cpu core2duo $@ 2>>log \
                | sed -u '/.*Booting/d' | tee -a log | \
        grep "RUN\|PASS\|FAIL\|failed\|error\|WARNING${grep_patterns}"
    if [[ ${PIPESTATUS[0]} -eq 124 ]]; then
        echo -e "\e[31m[  FAIL  ]\e[0m $(sed 's/.*-//g; s/\.iso//g' <<<${image}) timed out (${timeout}s)" | tee -a log
    fi
done

passed=$(grep "PASS" log | wc -l)
tests_nr=${#tests[@]}
failed=$((tests_nr-passed))

if [[ ${failed} -ne 0 ]]; then
    exit 1
fi

if grep -q "FAIL\|error" log; then
    exit 1
fi

