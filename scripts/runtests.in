#!/bin/bash

qemu=$(which qemu-system-i386 2>/dev/null || which qemu-system-x86_64 2>/dev/null)
timeout=5
grep_patterns=
GREEN="\e[32m"
RED="\e[31m"
RESET="\e[0m"
START_MESSAGE="[========]"
FAIL_MESSAGE="[  FAIL  ]"


function fail_message() {
    echo -e "${RED}${FAIL_MESSAGE}${RESET} ${@}"
}

function start_end_message() {
    echo -e "${GREEN}${START_MESSAGE}${RESET} ${@}"
}

function end_failed_message() {
    echo -e "${RED}${START_MESSAGE}${RESET} ${@}"
}

function set_boot_command_line() {
    local image="${1}"
    local cmdline="${2}"
    perl -pi -e 's/ \/kernel .*;/ \/kernel '"$(printf "%-64s" ${cmdline})"'; then reboot;/g' \
        ${image}
}

function run_test() {
    local test="${1}"
    local image=@CMAKE_CURRENT_BINARY_DIR@/images/test-image.iso
    set_boot_command_line ${image} ${test}
    timeout --foreground ${timeout} \
        ${qemu} -cdrom ${image} -display none -serial stdio -no-reboot -cpu core2duo 2>>log \
                | sed -u '/.*Booting/d' | tee -a log | \
                    grep "RUN\|PASS\|FAIL\|failed\|INF\|DBG\|ERR\|WRN${grep_patterns}"
    if [[ ${PIPESTATUS[0]} -eq 124 ]]; then
        fail_message "$(sed 's/.*-//g; s/\.iso//g' <<<${test}) timed out (${timeout}s)" | tee -a log
    fi
}

function main() {
    local test_case="${1}"
    if [[ "${qemu}" == "" ]]; then
        echo "No QEMU found!"
        exit 1
    fi
    rm -rf log
    if [[ "${test_case}" == "" ]]; then
        IFS=$'\n'
        tests=(`strings @CMAKE_CURRENT_BINARY_DIR@/@PROJECT_NAME@-tests | grep test_cases | c++filt | \
            grep "()" | sed 's/test_cases:://g;s/__/\./g;s/()//g; /yacppl/d; /{/d; /<lambda/d; s/::call//g; /::/d' | sort | uniq`)
        unset IFS
    else
        tests=(${test_case})
    fi
    if [[ "$DEBUG" ]]; then
        grep_patterns+="\|DEBUG"
    fi
    tests_nr=${#tests[@]}
    start_end_message "Running ${tests_nr} test cases"
    for test in "${tests[@]}"; do
        run_test "${test}"
    done
    passed=$(grep "PASS" log | wc -l)
    failed=$((tests_nr-passed))
    start_end_message "Passed ${passed} test cases"
    if [[ ${failed} -ne 0 ]]; then
        end_failed_message "Failed ${failed} test cases"
        exit 1
    fi
}

while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --test)
            test_case="$2"
            shift ;;
        *)
            break ;;
    esac
    shift
done

set -e
main ${test_case}

